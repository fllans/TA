PROGRAM BitTestMan


// Настройка таймера реального времени
// TimeRV - экземпляр FB IMPRV
BITTESTMAN_TIME_RV.W := FALSE;
BITTESTMAN_TIME_RV.Nh := 0;
BITTESTMAN_TIME_RV.Nm := 0;
BITTESTMAN_TIME_RV.Ns := 1;
BITTESTMAN_TIME_RV.Timp := T#100ms;
BITTESTMAN_TIME_RV (.W, .Nh, .Nm, .Ns, .Timp);

// Trigger_IMP - экземпляр FB R_TRIG
BITTESTMAN_TRIGGER_IMP(BITTESTMAN_TIME_RV.Out);


// Генерация событий по битам BYTE
IF BitTestManBYTE AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 7;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_BYTE_BIT <> 0 OR RESVAR_BYTE_BIT = 0) THEN
        RESVAR_BYTE_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_BYTE_BIT := ANY_TO_BYTE(BITSET(ANY_TO_DINT(RESVAR_BYTE_BIT), BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений BYTE
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(ANY_TO_DINT(RESVAR_BYTE_BIT), BITTESTMAN_BITS) THEN
    BitTestManBYTE := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам DINT
IF BitTestManDINT AND BITTESTMAN_TRIGGER_IMP.Q THEN

    BITTESTMAN_BITS := 31;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_DINT_BIT <> 0 OR RESVAR_DINT_BIT = 0) THEN
        RESVAR_DINT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_DINT_BIT := BITSET(RESVAR_DINT_BIT, BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y);
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(RESVAR_DINT_BIT, BITTESTMAN_BITS) THEN
    BitTestManDINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам DWORD
IF BitTestManDWORD AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 31;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_DWORD_BIT <> 0 OR RESVAR_DWORD_BIT = 0) THEN
        RESVAR_DWORD_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_DWORD_BIT := ANY_TO_DWORD(BITSET(ANY_TO_DINT(RESVAR_DWORD_BIT), BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений DWORD
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(ANY_TO_DINT(RESVAR_DWORD_BIT), BITTESTMAN_BITS) THEN
    BitTestManDWORD := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам INT
IF BitTestManINT AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 15;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_INT_BIT <> 0 OR RESVAR_INT_BIT = 0) THEN
        RESVAR_INT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_INT_BIT := ANY_TO_INT(BITSET(RESVAR_INT_BIT, BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений INT
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(RESVAR_INT_BIT, BITTESTMAN_BITS) THEN
    BitTestManINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам LINT
IF BitTestManLINT AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 63;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_LINT_BIT <> 0 OR RESVAR_LINT_BIT = 0) THEN
        RESVAR_LINT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_LINT_BIT := BITSET(ANY_TO_DINT(RESVAR_LINT_BIT), BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y);
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений LINT
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(ANY_TO_DINT(RESVAR_LINT_BIT), BITTESTMAN_BITS) THEN
    BitTestManLINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам LWORD
IF BitTestManLWORD AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 63;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_LWORD_BIT <> 0 OR RESVAR_LWORD_BIT = 0) THEN
        RESVAR_LWORD_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_LWORD_BIT := ANY_TO_LWORD(BITSET(ANY_TO_DINT(RESVAR_LWORD_BIT), BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений LWORD
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(ANY_TO_DINT(RESVAR_LWORD_BIT), BITTESTMAN_BITS) THEN
    BitTestManLWORD := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам SINT
IF BitTestManSINT AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 7;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_SINT_BIT <> 0 OR RESVAR_SINT_BIT = 0) THEN
        RESVAR_SINT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_SINT_BIT := ANY_TO_SINT(BITSET(RESVAR_SINT_BIT, BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений SINT
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(RESVAR_SINT_BIT, BITTESTMAN_BITS) THEN
    BitTestManSINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам UDINT
IF BitTestManUDINT AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 31;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_UDINT_BIT <> 0 OR RESVAR_UDINT_BIT = 0) THEN
        RESVAR_UDINT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_UDINT_BIT := ANY_TO_UDINT(BITSET(ANY_TO_DINT(RESVAR_UDINT_BIT), BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений UDINT
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(ANY_TO_DINT(RESVAR_UDINT_BIT), BITTESTMAN_BITS) THEN
    BitTestManUDINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам UINT
IF BitTestManUINT AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 15;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_UINT_BIT <> 0 OR RESVAR_UINT_BIT = 0) THEN
        RESVAR_UINT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_UINT_BIT := ANY_TO_UINT(BITSET(RESVAR_UINT_BIT, BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений UINT
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(RESVAR_UINT_BIT, BITTESTMAN_BITS) THEN
    BitTestManUINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам ULINT
IF BitTestManULINT AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 63;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_ULINT_BIT <> 0 OR RESVAR_ULINT_BIT = 0) THEN
        RESVAR_ULINT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_ULINT_BIT := ANY_TO_ULINT(BITSET(ANY_TO_DINT(RESVAR_ULINT_BIT), BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений ULINT
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(ANY_TO_DINT(RESVAR_ULINT_BIT), BITTESTMAN_BITS) THEN
    BitTestManULINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам USINT
IF BitTestManUSINT AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 7;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_USINT_BIT <> 0 OR RESVAR_USINT_BIT = 0) THEN
        RESVAR_USINT_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_USINT_BIT := ANY_TO_USINT(BITSET(RESVAR_USINT_BIT, BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений USINT
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(RESVAR_USINT_BIT, BITTESTMAN_BITS) THEN
    BitTestManUSINT := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


// Генерация событий по битам WORD
IF BitTestManWORD AND BITTESTMAN_TRIGGER_IMP.Q THEN
    BITTESTMAN_BITS := 15;

    IF BITTESTMAN_STEP = 0 AND (RESVAR_WORD_BIT <> 0 OR RESVAR_WORD_BIT = 0) THEN
        RESVAR_WORD_BIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;

    IF BITTESTMAN_BITSET_NBIT = BITTESTMAN_BITS + 1 THEN
        BITTESTMAN_BITSET_NBIT := 0;
        BITTESTMAN_BITSET_Y := NOT BITTESTMAN_BITSET_Y;
    END_IF;
    
    RESVAR_WORD_BIT := ANY_TO_WORD(BITSET(ANY_TO_DINT(RESVAR_WORD_BIT), BITTESTMAN_BITSET_NBIT, BITTESTMAN_BITSET_Y));
    BITTESTMAN_BITSET_NBIT := BITTESTMAN_BITSET_NBIT + 1;
    BITTESTMAN_STEP := BITTESTMAN_STEP + 1;
END_IF;

// Сброс значений WORD
IF (BITTESTMAN_STEP = BITTESTMAN_BITS * 2 + 2) AND NOT BITGET(ANY_TO_DINT(RESVAR_WORD_BIT), BITTESTMAN_BITS) THEN
    BitTestManWORD := FALSE;
    BITTESTMAN_STEP := 0;
    BITTESTMAN_BITS := 0;
    BITTESTMAN_BITSET_NBIT := 0;
END_IF;


END_PROGRAM